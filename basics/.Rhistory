dice <- 3 # number of dice
rolls <- sample(1:6, size = dice, replace = TRUE)
# rbinom not useful when sample space is not  {0,1}
dice <- 3 # number of dice
rolls <- sample(1:6, size = dice, replace = TRUE)
# rbinom not useful when sample space is not  {0,1}
dice <- 3 # number of dice
rolls <- sample(1:6, size = dice, replace = TRUE)
# rbinom not useful when sample space is not  {0,1}
dice <- 3 # number of dice
rolls <- sample(1:6, size = dice, replace = TRUE)
# rbinom not useful when sample space is not  {0,1}
dice <- 3 # number of dice
rolls <- sample(1:6, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 3
rolls <- sample(1:6, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
# rbinom not useful when sample space is not {0,1}
# number of dice (a trick to  simulate 5 rolls)
# instead of 3 dice and two times two of them (because they all are even)
dice <- 5
sample.space <- 1:6
rolls <- sample(sample.space, size = dice, replace = TRUE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in n) {
samples(i) <- rexp(m,lambda)
}
}
boostrap.exp(5, 20)
library(Matrix, lib.loc = "/usr/lib/R/library")
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in n) {
samples(i) <- rexp(m,lambda)
}
}
boostrap.exp(5, 20)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in n) {
samples[i,] <- rexp(m,lambda)
}
}
n = 5
m = 20
boostrap.exp(n,m)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in n) {
samples[i,] <- rexp(m,lambda)
}
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[2,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in n) {
samples[i,] <- rexp(m,lambda)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[2,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[3,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] %>%
rexp(m,lambda) %>%
map() %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
library(dplyr)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] %>%
rexp(m,lambda) %>%
map() %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] %>%
rexp(m,lambda) %>%
sapply(round(digits = 2))
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
help(round)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
sapply(round(digits = 2))
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[3,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[1:3,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[1:2,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
samples[1:2,]
u <- runif(100)
n <- log(1 - log(1-u))
n
u <- runif(100)
n <- log(1 - log(1-u))
names(knit_engines$get())
library(knitr)
names(knit_engines$get)
knitr::read_chunk('problem10.m')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::read_chunk('problem10.m')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>% round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
help(round)
library(dplyr)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>% round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
samples[1:2,]
u <- runif(100)
n <- log(1 - log(1-u))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(magrittr)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>% round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
samples[1:2,]
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
n <- 10000
u <- runif(n)
X <- 2*sqrt(u)*(u<0.25) + (2*u+0.5)*(0.25<=u & u<0.75) + (3-2*sqrt(1-u))*(u>=0.75)
library(ggplot2)
help("range")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
X <- range(3)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
X <- range(n,3)
help("sample")
help("geom_line")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- ggplot(Fx,x) + geom_line()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- ggplot(Fx,x) + geom_point()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- ggplot(c(Fx,x), aes(Fx,x)) + geom_point()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
df$x <- as.factor(df$x)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + (1-(3-x)^2)^2*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- seq(0, 3, by=1/10000)
Fx <- 2*sqrt(x)*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=n)
Fx <- 2*sqrt(x)*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=n)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.01)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + (1-((3-x)/2)^2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + (1-((3-x)/2)^2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
plot.fx <- plot(x,fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
n <- 50
alpha <- 0.17
x <- seq(0.1, 100, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
n <- 50
alpha <- 0.17
x <- seq(0.1, 20, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
n <- 50
alpha <- 0.17
x <- seq(0.1, 10, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
n <- 50
alpha <- 0.17
x <- seq(0.1, 10, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
mean <- mean(rayleigh)
theoretical_mean <- sqrt(pi/2*alpha)
var <- var(rayleigh)
theoretical_var <- (4 - pi)/2*alpha
n <- 50
a <- 0.17
x <- seq(0.1, 10, by=0.1) # x greater than zero
rayleigh <- a*x*exp(-(a/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
mean <- mean(rayleigh)
theoretical_mean <- sqrt(pi/2*a)
var <- var(rayleigh)
theoretical_var <- (4 - pi)/2*a
setwd("~/Documentos/estadistica/ejercicios")
