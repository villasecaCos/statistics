samples <- boostrap.exp(n,m)
samples[1:3,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 20
samples <- boostrap.exp(n,m)
samples[1:2,]
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
samples[1:2,]
u <- runif(100)
n <- log(1 - log(1-u))
n
u <- runif(100)
n <- log(1 - log(1-u))
names(knit_engines$get())
library(knitr)
names(knit_engines$get)
knitr::read_chunk('problem10.m')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::read_chunk('problem10.m')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>%
round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>% round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
help(round)
library(dplyr)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>% round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
samples[1:2,]
u <- runif(100)
n <- log(1 - log(1-u))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(magrittr)
boostrap.exp <- function(n,m,lambda=1){
samples <- matrix(nrow = n, ncol = m)
for (i in seq(1,n)) {
samples[i,] <- rexp(m,lambda) %>% round(digits = 2)
}
return(samples)
}
n = 5
m = 10
samples <- boostrap.exp(n,m)
samples[1:2,]
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
n <- 10000
u <- runif(n)
X <- 2*sqrt(u)*(u<0.25) + (2*u+0.5)*(0.25<=u & u<0.75) + (3-2*sqrt(1-u))*(u>=0.75)
library(ggplot2)
help("range")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
X <- range(3)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
X <- range(n,3)
help("sample")
help("geom_line")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- ggplot(Fx,x) + geom_line()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- ggplot(Fx,x) + geom_point()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- ggplot(c(Fx,x), aes(Fx,x)) + geom_point()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
df$x <- as.factor(df$x)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(1:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + (1-(3-x)^2)^2*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + (2*x+0.5)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- replicate(n,sample(0:3))
Fx <- 2*sqrt(x)*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 10000
x <- seq(0, 3, by=1/10000)
Fx <- 2*sqrt(x)*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=n)
Fx <- 2*sqrt(x)*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=n)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.01)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + ((-x^2-6*x-5)/4)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + (1-((3-x)/2)^2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
# values (0,3)
n <- 1000
x <- seq(0, 3, by=0.1)
Fx <- (x^2)/4*(x<1) + ((x-0.5)/2)*(1<=x & x<2) + (1-((3-x)/2)^2)*(2<=x & x<3) + 1*(x<=3)
fx <- x/2*(x<1) + (1/2)*(1<=x & x<2) + ((3-x)/2)*(2<=x & x<3)
plot.Fx <- plot(x,Fx)
plot.fx <- plot(x,fx)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
n <- 50
alpha <- 0.17
x <- seq(0.1, 100, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
n <- 50
alpha <- 0.17
x <- seq(0.1, 20, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
n <- 50
alpha <- 0.17
x <- seq(0.1, 10, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
n <- 50
alpha <- 0.17
x <- seq(0.1, 10, by=0.1) # x greater than zero
rayleigh <- alpha*x*exp(-(alpha/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
mean <- mean(rayleigh)
theoretical_mean <- sqrt(pi/2*alpha)
var <- var(rayleigh)
theoretical_var <- (4 - pi)/2*alpha
n <- 50
a <- 0.17
x <- seq(0.1, 10, by=0.1) # x greater than zero
rayleigh <- a*x*exp(-(a/2)*x^2)*(x > 0)
plot.rayleigh <- plot(x,rayleigh)
mean <- mean(rayleigh)
theoretical_mean <- sqrt(pi/2*a)
var <- var(rayleigh)
theoretical_var <- (4 - pi)/2*a
setwd("~/Documentos/estadistica/ejercicios")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
n <- 10000
a <- 1
theta <- runif(n,min = 0, max = pi)
velocity.theory <- runif(n, min=-1,max=1)
velocity <- a*cos(theta)
hist(velocity)
plot(theta,velocity.theory)
plot(theta,velocity)
n <- 100000
a <- 1
theta <- runif(n,min = 0, max = pi)
velocity.theory <- runif(n, min=-1,max=1)
velocity <- a*cos(theta)
hist(velocity)
plot(theta,velocity.theory)
plot(theta,velocity)
n <- 1000
a <- 1
theta <- runif(n,min = 0, max = pi)
velocity.theory <- runif(n, min=-1,max=1)
velocity <- a*cos(theta)
hist(velocity)
plot(theta,velocity.theory)
plot(theta,velocity)
n <- 1000
a <- 1
theta <- runif(n,min = 0, max = pi)
velocity.theory <- runif(n, min=-1,max=1)
velocity <- a*cos(theta)
hist(velocity)
plot(theta,velocity.theory)
plot(theta,velocity)
n <- 1000
type_I <- 0.375
type_II <- 0.625
office <- type_I*rexp(n, 15)+type_II*rexp(n,10)
n <- 1000
lambda.I <- 15
lambda.II <- 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
n <- 1000
lambda.I <- 15
lambda.II <- 10
type.I <- 0.375
type.II <- 0.625
exp.I <- rexp(n,lambda.I)
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
n <- 1000
lambda.I <- 0.06666
lambda.II <- 0.1
type.I <- 0.375
type.II <- 0.625
exp.I <- rexp(n,lambda.I)
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
n <- 1000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
n <- 100000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
n <- 1000000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
n <- 1000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
b
n <- 1000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
office.I <- type.I*rexp(n, lambda.I)
office.II <- type.I*rexp(n, lambda.II)
I <- sum(office.I>15)
II <- sum(office.II>15)
b <- I/(I+II)
n <- 100000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
office.I <- type.I*rexp(n, lambda.I)
office.II <- type.I*rexp(n, lambda.II)
I <- sum(office.I>15)
II <- sum(office.II>15)
b <- I/(I+II)
n <- 1000000
lambda.I <- 0.06666 # rate of 15
lambda.II <- 0.1 # rate of 10
type.I <- 0.375
type.II <- 0.625
office <- type.I*rexp(n, lambda.I)+type.II*rexp(n,lambda.II)
a <- sum(office<15)/n
office.I <- type.I*rexp(n, lambda.I)
office.II <- type.I*rexp(n, lambda.II)
I <- sum(office.I>15)
II <- sum(office.II>15)
b <- I/(I+II)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# create a dataframe with means, median, std of the columns
col.names <- c('measure','proteins','carbohydrates','fats','sodium', 'Q1','Q2','Q3','Q4')
num_columns <- length(col.names)
measures.names <- c('mean','median','std')
measures <- data.frame(matrix(ncol = num_columns, nrow = length(measures.names)))
names(measures) <- col.names
measures[1]<- measures.names
funcs <- c(mean,median,sd,quantile)
for (i in seq(1,num_columns)) {
measures[i,2:5] <- apply(products.info[2:5],2,funcs[i])#by columns
}
# create a dataframe with means, median, std of the columns
col.names <- c('measure','proteins','carbohydrates','fats','sodium', 'Q1','Q2','Q3','Q4')
num_columns <- length(col.names)
measures.names <- c('mean','median','std')
measures <- data.frame(matrix(ncol = num_columns, nrow = length(measures.names)))
names(measures) <- col.names
measures[1]<- measures.names
funcs <- c(mean(),median(),sd())
# create a dataframe with means, median, std of the columns
col.names <- c('measure','proteins','carbohydrates','fats','sodium')
num_columns <- length(col.names)
measures.names <- c('mean','median','std','Q1','Q2','Q3','Q4')
num_rows <- length(measures.names)
measures <- data.frame(matrix(ncol = num_columns, nrow = num_rows ))
names(measures) <- col.names
measures[1]<- measures.names
funcs <- c(mean(),median(),sd(), quantile())
# create a dataframe with means, median, std of the columns
col.names <- c('measure','proteins','carbohydrates','fats','sodium')
num_columns <- length(col.names)
measures.names <- c('mean','median','std','Q1','Q2','Q3','Q4')
num_rows <- length(measures.names)
measures <- data.frame(matrix(ncol = num_columns, nrow = num_rows ))
names(measures) <- col.names
measures[1]<- measures.names
funcs <- c(mean,median,sd, quantile)
for (i in seq(1,num_columns-3)) {
measures[i,2:5] <- apply(products.info[2:5],2,funcs[i])#by columns
}
# create a dataframe with means, median, std of the columns
col.names <- c('measure','proteins','carbohydrates','fats','sodium')
num_columns <- length(col.names)
measures.names <- c('mean','median','std','Q1','Q2','Q3','Q4')
num_rows <- length(measures.names)
measures <- data.frame(matrix(ncol = num_columns, nrow = num_rows ))
summary(measures)
# create a dataframe with means, median, std of the columns
summary(products.info[-1])
# create a dataframe with means, median, std of the columns
summary(products.info)
# vectors of nutritional information of the products
product <- c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O')
proteins <- c(29,15,11,16,18,15,52,24,18,3,1,2,11,11,26)
carbohydrates <- c(51,24,14,39,64,34,56,63,26,28,11,31,50,60,39)
fats <- c(32,13,8,24,46,23,46,54,20,10,8,19,11,9,31)
sodium <- c(909,303,79,836,735,709,2285, 1915, 914,5,266,414,159,329,962)
# create data frame with the vectors
products.info = data.frame(product,proteins,carbohydrates,fats,sodium)
products.info
# create a dataframe with means, median, std of the columns
summary(products.info)
cov.matrix <- cov(products.info[2:5])#compute covariance matrix over the columns
# vectors of nutritional information of the products
product <- c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O')
proteins <- c(29,15,11,16,18,15,52,24,18,3,1,2,11,11,26)
carbohydrates <- c(51,24,14,39,64,34,56,63,26,28,11,31,50,60,39)
fats <- c(32,13,8,24,46,23,46,54,20,10,8,19,11,9,31)
sodium <- c(909,303,79,836,735,709,2285, 1915, 914,5,266,414,159,329,962)
# create data frame with the vectors
products.info = data.frame(product,proteins,carbohydrates,fats,sodium)
products.info
cov.matrix <- cov(products.info[2:5])#compute covariance matrix over the columns
cor.matrix <- cor(products.info[2:5])#compute correlation matrix over the columns
cov.matrix
cor.matrix
prob.rain <- 0.5 #probability of rain
n <- 52 #weeks in a year
rainy.days <- rbinom(n, size = 2, prob=prob.rain)#number of days that have rained in 2 days
rain.in.weekends <- sapply(rainy.days,function(x) if(x>0) 1 else 0)
prob.weekend <- sum(rain.in.weekends)/n
prob.weekend
prob.rain <- 0.5 # probability of rain
n <- 520 # weeks in 10 years
rainy.days <- rbinom(n, size = 2, prob=prob.rain) # number of days that have rained in 2 days
rain.in.weekends <- sapply(rainy.days,function(x) if(x>0) 1 else 0)
prob.weekend <- sum(rain.in.weekends)/n
prob.weekend
prob.rain <- 0.5 # probability of rain
n <- 520 # weeks in 10 years
rainy.days <- rbinom(n, size = 2, prob=prob.rain) # number of days that have rained in 2 days
rain.in.weekends <- sapply(rainy.days,function(x) if(x>0) 1 else 0)
prob.weekend <- sum(rain.in.weekends)/n
prob.weekend
prob.rain <- 0.5 # probability of rain
n <- 520 # weeks in 10 years
rainy.days <- rbinom(n, size = 2, prob=prob.rain) # number of days that have rained in 2 days
rain.in.weekends <- sapply(rainy.days,function(x) if(x>0) 1 else 0)
prob.weekend <- sum(rain.in.weekends)/n
prob.weekend
